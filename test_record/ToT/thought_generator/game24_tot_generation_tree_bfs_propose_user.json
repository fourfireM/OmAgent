{
    "0": {
        "id": 0,
        "parent_id": null,
        "content": "7 3 8 1",
        "infer_input": "7 3 8 1",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 0,
        "children": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
        ]
    },
    "1": {
        "id": 1,
        "parent_id": 0,
        "content": "7 + 3 = 10 (left: 8 1 10)",
        "infer_input": "8 1 10",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "2": {
        "id": 2,
        "parent_id": 0,
        "content": "7 - 3 = 4 (left: 8 1 4)",
        "infer_input": "8 1 4",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "3": {
        "id": 3,
        "parent_id": 0,
        "content": "7 * 3 = 21 (left: 8 1 21)",
        "infer_input": "8 1 21",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "4": {
        "id": 4,
        "parent_id": 0,
        "content": "7 / 3 = 2.33 (left: 8 1 2.33)",
        "infer_input": "8 1 2.33",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "5": {
        "id": 5,
        "parent_id": 0,
        "content": "3 + 8 = 11 (left: 7 1 11)",
        "infer_input": "7 1 11",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "6": {
        "id": 6,
        "parent_id": 0,
        "content": "3 - 8 = -5 (left: 7 1 -5)",
        "infer_input": "7 1 -5",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "7": {
        "id": 7,
        "parent_id": 0,
        "content": "3 * 8 = 24 (left: 7 1 24)",
        "infer_input": "7 1 24",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "8": {
        "id": 8,
        "parent_id": 0,
        "content": "3 / 8 = 0.375 (left: 7 1 0.375)",
        "infer_input": "7 1 0.375",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "9": {
        "id": 9,
        "parent_id": 0,
        "content": "8 + 1 = 9 (left: 7 3 9)",
        "infer_input": "7 3 9",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "10": {
        "id": 10,
        "parent_id": 0,
        "content": "8 - 1 = 7 (left: 7 3 7)",
        "infer_input": "7 3 7",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "11": {
        "id": 11,
        "parent_id": 0,
        "content": "8 * 1 = 8 (left: 7 3 8)",
        "infer_input": "7 3 8",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "12": {
        "id": 12,
        "parent_id": 0,
        "content": "8 / 1 = 8 (left: 7 3 8)",
        "infer_input": "7 3 8",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "13": {
        "id": 13,
        "parent_id": 0,
        "content": "1 + 7 = 8 (left: 3 8)",
        "infer_input": "3 8",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "14": {
        "id": 14,
        "parent_id": 0,
        "content": "1 - 7 = -6 (left: 3 -6)",
        "infer_input": "3 -6",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "15": {
        "id": 15,
        "parent_id": 0,
        "content": "1 * 7 = 7 (left: 3 7)",
        "infer_input": "3 7",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "16": {
        "id": 16,
        "parent_id": 0,
        "content": "1 / 7 = 0.14 (left: 3 0.14)",
        "infer_input": "3 0.14",
        "generation_value": 0.0,
        "evaluation_value": 0.0,
        "depth": 1,
        "children": []
    },
    "prompt": "[PromptTemplate(name='PromptTemplate', component_stm=None, component_ltm=None, component_callback=None, component_input=None, input_variables=[], output_parser=None, partial_variables={}, template='You are the most powerful AI agent, you are able to handle any given task, so your abilities are clearly beyond those of a simple AI or LLM.\\n\\nUse numbers and basic arithmetic operations (+ - * /) to obtain 24. Each step, you are only allowed to choose two of the remaining numbers to obtain a new number.\\nNow your task is to generate the next thought based on the input content.\\n\\n\\n\\n*** Important Notice ***\\n- You must follow your workflow.\\n- You are more than a Large Language Model (LLM), you have the capability to do actual things rather than simply give guidance or write text.\\n- You must pass literal and concrete value to tools, do not use reference or pointer, labels.', template_format='jinja2', validate_template=True, role='system'), PromptTemplate(name='PromptTemplate', component_stm=None, component_ltm=None, component_callback=None, component_input=None, input_variables=['input'], output_parser=None, partial_variables={}, template='Now, it\\'s your turn to complete the task.\\n\\nYou should follow the format of the examples to generate the next thought.\\n\\n--- Output ---\\nThe output should be a dict in json format, key is \"llm_response\" and \"next_input\":\\n\"llm_response\": The response you give based on the input content.\\n\"next_input\": The next input you give based on the input content.\\n{\\n    \"llm_response\": \"list of string\",\\n    \"next_input\": \"list of string\",\\n}\\n\\n--- Examples ---\\n1.\\nInput: 4 4 6 8\\nOutput: {\\n    \"llm_response\": [\"4 * 4 = 16 (left: 6 8 16)\", \"4 / 4 = 1 (left: 6 8 1)\", \"4 + 4 = 8 (left: 6 8 8)\", \"4 - 4 = 0 (left: 6 8 0)\", \"6 * 4 = 24 (left: 4 4 24)\", \"6 / 4 = 1.5 (left: 4 4 1.5)\", \"6 + 4 = 10 (left: 4 4 10)\", \"6 - 4 = 2 (left: 4 4 2)\", \"8 * 4 = 32 (left: 4 4 32)\", \"8 / 4 = 2 (left: 4 4 2)\", \"8 + 4 = 12 (left: 4 4 12)\", \"8 - 4 = 4 (left: 4 4 4)\"],\\n    \"next_input\": [\"6 8 16\", \"6 8 1\", \"6 8 8\", \"6 8 0\", \"4 4 24\", \"4 4 1.5\", \"4 4 10\", \"4 4 2\", \"4 4 32\", \"4 4 2\", \"4 4 12\", \"4 4 4\"],\\n}\\n\\n2.\\nInput: 2 8 8 14\\nOutput: {\\n    \"llm_response\": [\"2 + 8 = 10 (left: 8 10 14)\", \"2 - 8 = -6 (left: 8 -6 14)\", \"2 * 8 = 16 (left: 8 10 16)\", \"2 / 8 = 0.25 (left: 8 10 0.25)\", \"8 + 8 = 16 (left: 2 8 16)\", \"8 - 8 = 0 (left: 2 8 0)\", \"8 * 8 = 64 (left: 2 8 64)\", \"8 / 8 = 1 (left: 2 8 1)\", \"14 + 2 = 16 (left: 8 8 16)\", \"14 - 2 = 12 (left: 8 8 12)\", \"14 * 2 = 28 (left: 8 8 28)\", \"14 / 2 = 7 (left: 8 8 7)\"],\\n    \"next_input\": [\"8 10 14\", \"8 -6 14\", \"8 10 16\", \"8 10 0.25\", \"2 8 16\", \"2 8 0\", \"2 8 64\", \"2 8 1\", \"8 8 16\", \"8 8 12\", \"8 8 28\", \"8 8 7\"],\\n}\\n\\nInput: 6 8 16\\nOutput: {\\n    \"llm_response\": [\"6 + 8 = 14 (left: 16 14)\", \"6 - 8 = -2 (left: 16 -2)\", \"6 * 8 = 48 (left: 16 48)\", \"6 / 8 = 0.75 (left: 16 0.75)\", \"8 + 6 = 14 (left: 16 14)\", \"8 - 6 = 2 (left: 16 2)\", \"8 * 6 = 48 (left: 16 48)\", \"8 / 6 = 1.33 (left: 16 1.33)\", \"16 + 6 = 22 (left: 8 16)\", \"16 - 6 = 10 (left: 8 10)\", \"16 * 6 = 96 (left: 8 96)\", \"16 / 6 = 2.67 (left: 8 2.67)\"],\\n    \"next_input\": [\"16 14\", \"16 -2\", \"16 48\", \"16 0.75\", \"8 14\", \"8 2\", \"8 48\", \"8 1.33\", \"8 16\", \"8 10\", \"8 96\", \"8 2.67\"],\\n}\\n\\n--- Input ---\\nInput: {{input}}\\nOutput:', template_format='jinja2', validate_template=True, role='user')]"
}